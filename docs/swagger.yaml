definitions:
  model.Armor:
    properties:
      armorClass:
        type: integer
      id:
        type: integer
      item:
        $ref: '#/definitions/model.Item'
    type: object
  model.Attribute:
    properties:
      characterID:
        type: integer
      charisma:
        type: integer
      constitution:
        type: integer
      dexterity:
        type: integer
      id:
        type: integer
      intelligence:
        type: integer
      strength:
        type: integer
      wisdom:
        type: integer
    type: object
  model.Character:
    properties:
      alias:
        type: string
      characterItem:
        items:
          $ref: '#/definitions/model.CharacterItem'
        type: array
      id:
        type: integer
      last_name:
        type: string
      level:
        type: integer
      name:
        type: string
      stat:
        $ref: '#/definitions/model.Attribute'
      userID:
        type: integer
    type: object
  model.CharacterClass:
    properties:
      commonWeaponMastery:
        type: string
      fortitudeMastery:
        type: string
      health:
        type: integer
      heavyArmorMastery:
        type: string
      id:
        type: integer
      lightArmorMastery:
        type: string
      martialWeaponMastery:
        type: string
      mediumArmorMastery:
        type: string
      name:
        type: string
      perceptionMastery:
        type: string
      reflexMastery:
        type: string
      unArmedWeaponMastery:
        type: string
      unarmedMastery:
        type: string
      willMastery:
        type: string
    type: object
  model.CharacterClassCreate:
    properties:
      health:
        example: 6
        type: integer
      name:
        example: Fighter
        type: string
      perception_mastery:
        example: Train
        type: string
    type: object
  model.CharacterExternal:
    properties:
      alias:
        type: string
      id:
        type: integer
      last_name:
        type: string
      name:
        type: string
      user_id:
        type: integer
    required:
    - name
    type: object
  model.CharacterItem:
    properties:
      character:
        $ref: '#/definitions/model.Character'
      characterId:
        type: integer
      id:
        type: integer
      item:
        $ref: '#/definitions/model.Item'
      itemId:
        type: integer
      quantity:
        type: integer
    type: object
  model.CharacterUpdateExternal:
    properties:
      alias:
        type: string
      last_name:
        type: string
      name:
        type: string
    type: object
  model.CreateArmor:
    properties:
      armor_class:
        type: integer
      bulk:
        type: number
      description:
        type: string
      level:
        type: integer
      name:
        type: string
      price:
        type: string
    required:
    - armor_class
    - bulk
    - description
    - name
    - price
    type: object
  model.CreateCharacter:
    properties:
      alias:
        type: string
      last_name:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  model.CreateDomain:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - description
    - name
    type: object
  model.CreateUser:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  model.Domain:
    properties:
      description:
        type: string
      gods:
        items:
          $ref: '#/definitions/model.God'
        type: array
      id:
        type: integer
      name:
        type: string
    type: object
  model.DomainExternal:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
    required:
    - description
    - id
    - name
    type: object
  model.DomainID:
    properties:
      id:
        type: integer
    type: object
  model.Gear:
    properties:
      id:
        type: integer
      item:
        $ref: '#/definitions/model.Item'
    type: object
  model.God:
    properties:
      alias:
        type: string
      alignment:
        type: string
      anathema:
        type: string
      areasOfInterest:
        type: string
      chosenWeapon:
        type: string
      description:
        type: string
      domains:
        items:
          $ref: '#/definitions/model.Domain'
        type: array
      edict:
        type: string
      id:
        type: integer
      name:
        type: string
      sacredAnimals:
        type: string
      sacredColors:
        type: string
      temples:
        type: string
      worships:
        type: string
    type: object
  model.GodCreate:
    properties:
      alias:
        example: The Song of the Spheres
        type: string
      alignment:
        example: CG
        type: string
      anathema:
        type: string
      areas_of_interest:
        type: string
      chosen_weapon:
        type: string
      description:
        type: string
      domains:
        items:
          $ref: '#/definitions/model.DomainID'
        type: array
      edict:
        type: string
      name:
        example: Desna
        type: string
      sacred_animals:
        type: string
      sacred_colors:
        type: string
      temples:
        type: string
      worships:
        type: string
    required:
    - alias
    - alignment
    - anathema
    - areas_of_interest
    - chosen_weapon
    - domains
    - edict
    - name
    - sacred_animals
    - sacred_colors
    - temples
    - worships
    type: object
  model.GodUpdate:
    properties:
      alias:
        type: string
      alignment:
        type: string
      anathema:
        type: string
      areas_of_interest:
        type: string
      chosen_weapon:
        type: string
      description:
        type: string
      domains:
        items:
          $ref: '#/definitions/model.DomainID'
        type: array
      edict:
        type: string
      name:
        type: string
      sacred_animals:
        type: string
      sacred_colors:
        type: string
      temples:
        type: string
      worships:
        type: string
    type: object
  model.Item:
    properties:
      bulk:
        type: number
      description:
        type: string
      id:
        type: integer
      level:
        type: integer
      name:
        type: string
      ownerID:
        type: integer
      ownerType:
        type: string
      price:
        type: string
    type: object
  model.UpdateDomain:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - description
    - name
    type: object
  model.UserExternal:
    properties:
      admin:
        type: boolean
      characters:
        items:
          $ref: '#/definitions/model.Character'
        type: array
      id:
        type: integer
      username:
        type: string
    required:
    - username
    type: object
  model.UserLogin:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  model.UserPasswordUpdate:
    properties:
      password:
        type: string
    required:
    - password
    type: object
  model.UserUpdateExternal:
    properties:
      email:
        type: string
      username:
        type: string
    type: object
  model.Weapon:
    properties:
      damage:
        type: integer
      dice:
        type: integer
      diceQuantity:
        type: integer
      id:
        type: integer
      item:
        $ref: '#/definitions/model.Item'
    type: object
info:
  contact: {}
  description: Api for Pet Project
  title: Kingdom Api
  version: 0.1.0
paths:
  /character:
    get:
      consumes:
      - application/json
      description: Return all characters for current user
      produces:
      - application/json
      responses:
        "200":
          description: Character details
          schema:
            $ref: '#/definitions/model.CharacterExternal'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Returns all characters
      tags:
      - Character
    post:
      consumes:
      - application/json
      description: Create new character
      parameters:
      - description: Character data
        in: body
        name: character
        required: true
        schema:
          $ref: '#/definitions/model.CreateCharacter'
      produces:
      - application/json
      responses:
        "201":
          description: Character details
          schema:
            $ref: '#/definitions/model.CharacterExternal'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Create and returns character or nil
      tags:
      - Character
  /character/{id}:
    delete:
      consumes:
      - application/json
      description: Permissions for Character's User or Admin
      parameters:
      - description: Character id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: You can't access for this API
          schema:
            type: string
        "404":
          description: Character doesn't exist
          schema:
            type: string
      summary: Deletes Character by ID or returns nil
      tags:
      - Character
    get:
      consumes:
      - application/json
      description: Retrieve Character details using its ID
      parameters:
      - description: character id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: character details
          schema:
            $ref: '#/definitions/model.CharacterExternal'
        "404":
          description: Character not found
          schema:
            type: string
      summary: Returns Character by id
      tags:
      - Character
    patch:
      consumes:
      - application/json
      description: Permissions for Character's User or Admin
      parameters:
      - description: Character id
        in: path
        name: id
        required: true
        type: integer
      - description: Character data
        in: body
        name: character
        required: true
        schema:
          $ref: '#/definitions/model.CharacterUpdateExternal'
      produces:
      - application/json
      responses:
        "200":
          description: Character details
          schema:
            $ref: '#/definitions/model.CharacterExternal'
        "404":
          description: Character doesn't exist
          schema:
            type: string
      summary: Updates Character by ID or nil
      tags:
      - Character
  /class:
    post:
      consumes:
      - application/json
      description: Create new Character Class
      parameters:
      - description: Character Class data
        in: body
        name: god
        required: true
        schema:
          $ref: '#/definitions/model.CharacterClassCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Character Class details
          schema:
            $ref: '#/definitions/model.CharacterClass'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Create and returns new Character Class or nil
      tags:
      - Character Class
  /domain:
    get:
      consumes:
      - application/json
      description: Return all domains
      produces:
      - application/json
      responses:
        "200":
          description: Domain details
          schema:
            $ref: '#/definitions/model.Domain'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Returns all domains
      tags:
      - Domain
    post:
      consumes:
      - application/json
      description: Permissions for Admin
      parameters:
      - description: Domain data
        in: body
        name: character
        required: true
        schema:
          $ref: '#/definitions/model.CreateDomain'
      produces:
      - application/json
      responses:
        "201":
          description: Domain details
          schema:
            $ref: '#/definitions/model.DomainExternal'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: You can't access for this API
          schema:
            type: string
      summary: Create and returns domain or nil
      tags:
      - Domain
  /domain/{id}:
    delete:
      consumes:
      - application/json
      description: Permissions for Admin
      parameters:
      - description: Domain id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: You can't access for this API
          schema:
            type: string
        "404":
          description: Domain doesn't exist
          schema:
            type: string
      summary: Deletes Domain by ID or returns nil
      tags:
      - Domain
    get:
      consumes:
      - application/json
      description: Retrieve Domain details using its ID
      parameters:
      - description: domain id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: domain details
          schema:
            $ref: '#/definitions/model.Domain'
        "404":
          description: Domain not found
          schema:
            type: string
      summary: Returns Domain by id
      tags:
      - Domain
    patch:
      consumes:
      - application/json
      description: Permissions for Admin
      parameters:
      - description: Domain id
        in: path
        name: id
        required: true
        type: integer
      - description: Domain data
        in: body
        name: character
        required: true
        schema:
          $ref: '#/definitions/model.UpdateDomain'
      produces:
      - application/json
      responses:
        "200":
          description: Domain details
          schema:
            $ref: '#/definitions/model.DomainExternal'
        "403":
          description: You can't access for this API
          schema:
            type: string
        "404":
          description: Domain doesn't exist
          schema:
            type: string
      summary: Updates Domain by ID or nil
      tags:
      - Domain
  /god:
    get:
      consumes:
      - application/json
      description: Return all gods and their domains
      produces:
      - application/json
      responses:
        "200":
          description: Character details
          schema:
            $ref: '#/definitions/model.God'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Returns all gods
      tags:
      - God
    post:
      consumes:
      - application/json
      description: Create new God
      parameters:
      - description: God data
        in: body
        name: god
        required: true
        schema:
          $ref: '#/definitions/model.GodCreate'
      produces:
      - application/json
      responses:
        "201":
          description: God details
          schema:
            $ref: '#/definitions/model.God'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Create and returns new God or nil
      tags:
      - God
  /god/{id}:
    delete:
      consumes:
      - application/json
      description: Permissions for Auth user
      parameters:
      - description: God id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: You can't access for this API
          schema:
            type: string
        "404":
          description: God doesn't exist
          schema:
            type: string
      summary: Deletes God by ID or returns nil
      tags:
      - God
    get:
      consumes:
      - application/json
      description: Retrieve God details using its ID
      parameters:
      - description: god id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: God details
          schema:
            $ref: '#/definitions/model.God'
        "404":
          description: God not found
          schema:
            type: string
      summary: Returns God by id
      tags:
      - God
    patch:
      consumes:
      - application/json
      description: Updates God
      parameters:
      - description: God id
        in: path
        name: id
        required: true
        type: integer
      - description: God data
        in: body
        name: character
        required: true
        schema:
          $ref: '#/definitions/model.GodUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: God details
          schema:
            $ref: '#/definitions/model.God'
        "404":
          description: God doesn't exist
          schema:
            type: string
      summary: Updates God by ID or nil
      tags:
      - God
  /item:
    get:
      consumes:
      - application/json
      description: Return all items
      produces:
      - application/json
      responses:
        "200":
          description: Item details
          schema:
            $ref: '#/definitions/model.Item'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Returns all items
      tags:
      - Item
  /item/armor:
    get:
      consumes:
      - application/json
      description: Return all armors
      produces:
      - application/json
      responses:
        "200":
          description: Armor details
          schema:
            $ref: '#/definitions/model.Armor'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Returns all armors
      tags:
      - Item
    post:
      consumes:
      - application/json
      description: Permissions for Admin
      parameters:
      - description: Armor data
        in: body
        name: character
        required: true
        schema:
          $ref: '#/definitions/model.CreateArmor'
      produces:
      - application/json
      responses:
        "201":
          description: Armor details
          schema:
            $ref: '#/definitions/model.Armor'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: You can't access for this API
          schema:
            type: string
      summary: Create and returns armor or nil
      tags:
      - Item
  /item/armor/{id}:
    get:
      consumes:
      - application/json
      description: Permissions for auth users
      parameters:
      - description: armor id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Armor details
          schema:
            $ref: '#/definitions/model.Armor'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Returns Armor by ID
      tags:
      - Item
  /item/gear:
    get:
      consumes:
      - application/json
      description: Return all gears
      produces:
      - application/json
      responses:
        "200":
          description: Gear details
          schema:
            $ref: '#/definitions/model.Gear'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Returns all gears
      tags:
      - Item
  /item/weapon:
    get:
      consumes:
      - application/json
      description: Return all weapons
      produces:
      - application/json
      responses:
        "200":
          description: Weapon details
          schema:
            $ref: '#/definitions/model.Weapon'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Returns all weapons
      tags:
      - Item
  /login:
    post:
      consumes:
      - application/json
      description: Авторизация пользователя по логину и паролю
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Login user for token
      tags:
      - auth
  /user:
    get:
      consumes:
      - application/json
      description: Returns all users
      produces:
      - application/json
      responses:
        "200":
          description: User list
          schema:
            $ref: '#/definitions/model.UserExternal'
        "500":
          description: Internal Server Error
      summary: Returns all users
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Create new user
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.CreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: user details
          schema:
            $ref: '#/definitions/model.UserExternal'
        "404":
          description: User already exist
          schema:
            type: string
      summary: Create and returns user or nil
      tags:
      - User
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete User
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Ok
          schema:
            type: string
        "400":
          description: User doesn't exist
          schema:
            type: string
        "401":
          description: You need to provide a valid access token or user credentials
            to access this api
          schema:
            type: string
      summary: Returns and delete User by ID if you're admin
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Retrieve User details using its ID
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: user details
          schema:
            $ref: '#/definitions/model.UserExternal'
        "404":
          description: User not found
          schema:
            type: string
      summary: returns User by ID
      tags:
      - User
    patch:
      consumes:
      - application/json
      description: Permissions for Admin and current user
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: integer
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserUpdateExternal'
      produces:
      - application/json
      responses:
        "201":
          description: Ok
          schema:
            type: string
        "400":
          description: User doesn't exist
          schema:
            type: string
        "401":
          description: You need to provide a valid access token or user credentials
            to access this api
          schema:
            type: string
      summary: Update User
      tags:
      - User
  /user/password:
    patch:
      consumes:
      - application/json
      description: 'Permissions: Current User'
      parameters:
      - description: User password data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserPasswordUpdate'
      produces:
      - application/json
      responses:
        "201":
          description: Ok
          schema:
            type: string
        "400":
          description: User doesn't exist
          schema:
            type: string
        "401":
          description: You need to provide a valid access token or user credentials
            to access this api
          schema:
            type: string
      summary: Changes User's password
      tags:
      - User
schemes:
- http
- https
securityDefinitions:
  JWT:
    description: JWT security accessToken. Please add it in the format "Bearer {AccessToken}"
      to authorize your requests.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
