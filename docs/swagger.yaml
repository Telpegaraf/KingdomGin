definitions:
  model.Ancestry:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      raceID:
        type: integer
    type: object
  model.AncestryCreate:
    properties:
      description:
        type: string
      name:
        type: string
      race_id:
        type: integer
    required:
    - description
    - name
    - race_id
    type: object
  model.AncestryExternal:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      race_id:
        type: integer
    type: object
  model.AncestryUpdate:
    properties:
      description:
        type: string
      name:
        type: string
      race_id:
        type: integer
    type: object
  model.Armor:
    properties:
      armorClass:
        type: integer
      id:
        type: integer
      item:
        $ref: '#/definitions/model.Item'
    type: object
  model.ArmorExternal:
    properties:
      armor_class:
        type: integer
      bulk:
        type: number
      description:
        type: string
      id:
        type: integer
      item_id:
        type: integer
      level:
        type: integer
      name:
        type: string
      price:
        type: string
    required:
    - name
    - price
    type: object
  model.Attribute:
    properties:
      characterID:
        type: integer
      charisma:
        type: integer
      constitution:
        type: integer
      dexterity:
        type: integer
      id:
        type: integer
      intelligence:
        type: integer
      strength:
        type: integer
      wisdom:
        type: integer
    type: object
  model.AttributeExternal:
    properties:
      characterID:
        type: integer
      charisma:
        type: integer
      constitution:
        type: integer
      dexterity:
        type: integer
      id:
        type: integer
      intelligence:
        type: integer
      strength:
        type: integer
      wisdom:
        type: integer
    type: object
  model.Background:
    properties:
      attributeBoost:
        type: string
      description:
        type: string
      featID:
        type: integer
      id:
        type: integer
      name:
        type: string
      skill:
        items:
          $ref: '#/definitions/model.Skill'
        type: array
    type: object
  model.Character:
    properties:
      alias:
        type: string
      attribute:
        $ref: '#/definitions/model.Attribute'
      characterBoost:
        $ref: '#/definitions/model.CharacterBoost'
      characterClassID:
        type: integer
      characterDefence:
        $ref: '#/definitions/model.CharacterDefence'
      characterItem:
        items:
          $ref: '#/definitions/model.CharacterItem'
        type: array
      id:
        type: integer
      last_name:
        type: string
      level:
        type: integer
      name:
        type: string
      slot:
        items:
          $ref: '#/definitions/model.Slot'
        type: array
      userID:
        type: integer
    type: object
  model.CharacterBoost:
    properties:
      characterID:
        type: integer
      charisma:
        type: integer
      constitution:
        type: integer
      dexterity:
        type: integer
      free:
        type: integer
      id:
        type: integer
      intelligence:
        type: integer
      strength:
        type: integer
      wisdom:
        type: integer
    type: object
  model.CharacterBoostExternal:
    properties:
      characterID:
        type: integer
      charisma:
        type: integer
      constitution:
        type: integer
      dexterity:
        type: integer
      free:
        type: integer
      id:
        type: integer
      intelligence:
        type: integer
      strength:
        type: integer
      wisdom:
        type: integer
    type: object
  model.CharacterClass:
    properties:
      character:
        $ref: '#/definitions/model.Character'
      commonWeaponMastery:
        type: string
      fortitudeMastery:
        type: string
      health:
        type: integer
      heavyArmorMastery:
        type: string
      id:
        type: integer
      lightArmorMastery:
        type: string
      martialWeaponMastery:
        type: string
      mediumArmorMastery:
        type: string
      name:
        type: string
      perceptionMastery:
        type: string
      reflexMastery:
        type: string
      traditionID:
        type: integer
      unArmedWeaponMastery:
        type: string
      unarmedMastery:
        type: string
      willMastery:
        type: string
    type: object
  model.CharacterClassCreate:
    properties:
      health:
        example: 6
        type: integer
      name:
        example: Fighter
        type: string
      perception_mastery:
        example: Train
        type: string
    type: object
  model.CharacterDefence:
    properties:
      armorClass:
        type: integer
      characterID:
        type: integer
      dying:
        type: integer
      fortitude:
        $ref: '#/definitions/model.MasteryLevel'
      heavyArmor:
        $ref: '#/definitions/model.MasteryLevel'
      hitPoint:
        type: integer
      id:
        type: integer
      lightArmor:
        $ref: '#/definitions/model.MasteryLevel'
      maxHitPoint:
        type: integer
      mediumArmor:
        $ref: '#/definitions/model.MasteryLevel'
      perception:
        $ref: '#/definitions/model.MasteryLevel'
      reflex:
        $ref: '#/definitions/model.MasteryLevel'
      speed:
        type: integer
      temporaryHitPoint:
        type: integer
      unarmed:
        $ref: '#/definitions/model.MasteryLevel'
      will:
        $ref: '#/definitions/model.MasteryLevel'
      wounded:
        type: boolean
    type: object
  model.CharacterExternal:
    properties:
      alias:
        type: string
      attribute:
        $ref: '#/definitions/model.Attribute'
      character_boost:
        $ref: '#/definitions/model.CharacterBoost'
      character_class_id:
        type: integer
      character_item:
        items:
          $ref: '#/definitions/model.CharacterItem'
        type: array
      id:
        type: integer
      last_name:
        type: string
      level:
        type: integer
      name:
        type: string
      slot:
        items:
          $ref: '#/definitions/model.Slot'
        type: array
      user_id:
        type: integer
    required:
    - name
    type: object
  model.CharacterItem:
    properties:
      armor:
        items:
          $ref: '#/definitions/model.Slot'
        type: array
      character:
        $ref: '#/definitions/model.Character'
      characterID:
        type: integer
      firstWeapon:
        items:
          $ref: '#/definitions/model.Slot'
        type: array
      id:
        type: integer
      item:
        $ref: '#/definitions/model.Item'
      itemID:
        type: integer
      quantity:
        type: integer
      secondWeapon:
        items:
          $ref: '#/definitions/model.Slot'
        type: array
    type: object
  model.CharacterItemExternal:
    properties:
      bulk:
        type: number
      character_id:
        type: integer
      character_name:
        type: string
      id:
        type: integer
      item_name:
        type: string
      item_type:
        type: string
      itemID:
        type: integer
      quantity:
        example: 1
        type: integer
    type: object
  model.CharacterUpdate:
    properties:
      alias:
        type: string
      last_name:
        type: string
      level:
        type: integer
      name:
        type: string
    type: object
  model.CreateArmor:
    properties:
      armor_class:
        type: integer
      bulk:
        type: number
      description:
        type: string
      level:
        type: integer
      name:
        type: string
      price:
        type: string
    required:
    - description
    - name
    - price
    type: object
  model.CreateCharacter:
    properties:
      alias:
        type: string
      character_class_id:
        type: integer
      last_name:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  model.CreateCharacterItem:
    properties:
      character_id:
        type: integer
      item_id:
        type: integer
      quantity:
        example: 1
        type: integer
    required:
    - character_id
    - item_id
    type: object
  model.CreateDomain:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - description
    - name
    type: object
  model.CreateFeat:
    properties:
      description:
        type: string
      level:
        type: integer
      name:
        type: string
    required:
    - name
    type: object
  model.CreateGear:
    properties:
      bulk:
        example: 1
        type: number
      description:
        type: string
      level:
        type: integer
      name:
        type: string
      price:
        type: string
    required:
    - bulk
    - description
    - name
    - price
    type: object
  model.CreateUser:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  model.CreateWeapon:
    properties:
      bulk:
        example: 0.1
        type: number
      damage:
        type: integer
      damage_type:
        type: string
      description:
        type: string
      dice:
        example: 4
        type: integer
      diceQuantity:
        example: 1
        type: integer
      level:
        type: integer
      name:
        type: string
      price:
        type: string
    required:
    - bulk
    - damage_type
    - description
    - dice
    - diceQuantity
    - name
    - price
    type: object
  model.Domain:
    properties:
      description:
        type: string
      gods:
        items:
          $ref: '#/definitions/model.God'
        type: array
      id:
        type: integer
      name:
        type: string
    type: object
  model.DomainExternal:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
    required:
    - description
    - id
    - name
    type: object
  model.DomainID:
    properties:
      id:
        type: integer
    type: object
  model.Feat:
    properties:
      background:
        items:
          $ref: '#/definitions/model.Background'
        type: array
      description:
        type: string
      id:
        type: integer
      level:
        type: integer
      name:
        type: string
    type: object
  model.FeatExternal:
    properties:
      description:
        type: string
      id:
        type: integer
      level:
        type: integer
      name:
        type: string
    type: object
  model.Gear:
    properties:
      id:
        type: integer
      item:
        $ref: '#/definitions/model.Item'
    type: object
  model.GearExternal:
    properties:
      bulk:
        example: 1
        type: number
      description:
        type: string
      id:
        type: integer
      item_id:
        type: integer
      level:
        type: integer
      name:
        type: string
      price:
        type: string
    type: object
  model.God:
    properties:
      alias:
        type: string
      alignment:
        type: string
      anathema:
        type: string
      areasOfInterest:
        type: string
      chosenWeapon:
        type: string
      description:
        type: string
      domains:
        items:
          $ref: '#/definitions/model.Domain'
        type: array
      edict:
        type: string
      id:
        type: integer
      name:
        type: string
      sacredAnimals:
        type: string
      sacredColors:
        type: string
      temples:
        type: string
      worships:
        type: string
    type: object
  model.GodCreate:
    properties:
      alias:
        example: The Song of the Spheres
        type: string
      alignment:
        example: CG
        type: string
      anathema:
        type: string
      areas_of_interest:
        type: string
      chosen_weapon:
        type: string
      description:
        type: string
      domains:
        items:
          $ref: '#/definitions/model.DomainID'
        type: array
      edict:
        type: string
      name:
        example: Desna
        type: string
      sacred_animals:
        type: string
      sacred_colors:
        type: string
      temples:
        type: string
      worships:
        type: string
    required:
    - alias
    - alignment
    - anathema
    - areas_of_interest
    - chosen_weapon
    - domains
    - edict
    - name
    - sacred_animals
    - sacred_colors
    - temples
    - worships
    type: object
  model.GodUpdate:
    properties:
      alias:
        type: string
      alignment:
        type: string
      anathema:
        type: string
      areas_of_interest:
        type: string
      chosen_weapon:
        type: string
      description:
        type: string
      domains:
        items:
          $ref: '#/definitions/model.DomainID'
        type: array
      edict:
        type: string
      name:
        type: string
      sacred_animals:
        type: string
      sacred_colors:
        type: string
      temples:
        type: string
      worships:
        type: string
    type: object
  model.HitPoint:
    enum:
    - Six
    - Eight
    - Ten
    - Twelve
    type: string
    x-enum-varnames:
    - Six
    - Eight
    - Ten
    - Twelve
  model.Item:
    properties:
      bulk:
        type: number
      characterItem:
        items:
          $ref: '#/definitions/model.CharacterItem'
        type: array
      description:
        type: string
      id:
        type: integer
      level:
        type: integer
      name:
        type: string
      ownerID:
        type: integer
      ownerType:
        type: string
      price:
        type: string
    type: object
  model.ItemExternal:
    properties:
      bulk:
        type: number
      description:
        type: string
      id:
        type: integer
      level:
        type: integer
      name:
        type: string
      owner_id:
        type: integer
      owner_type:
        type: string
      price:
        type: string
    required:
    - name
    - price
    type: object
  model.MasteryLevel:
    enum:
    - None
    - Train
    - Expert
    - Master
    - Legend
    type: string
    x-enum-varnames:
    - None
    - Train
    - Expert
    - Master
    - Legend
  model.Race:
    properties:
      abilityBoost:
        type: string
      ancestry:
        items:
          $ref: '#/definitions/model.Ancestry'
        type: array
      description:
        type: string
      hitPoint:
        $ref: '#/definitions/model.HitPoint'
      id:
        type: integer
      language:
        type: string
      name:
        type: string
      size:
        $ref: '#/definitions/model.SquareSize'
      speed:
        type: integer
    type: object
  model.RaceCreate:
    properties:
      ability_boost:
        type: string
      description:
        type: string
      hit_points:
        $ref: '#/definitions/model.HitPoint'
      language:
        type: string
      name:
        type: string
      size:
        $ref: '#/definitions/model.SquareSize'
      speed:
        type: integer
    required:
    - description
    - hit_points
    - name
    - size
    - speed
    type: object
  model.RaceExternal:
    properties:
      ability_boost:
        type: string
      description:
        type: string
      hit_points:
        $ref: '#/definitions/model.HitPoint'
      id:
        type: integer
      language:
        type: string
      name:
        type: string
      size:
        $ref: '#/definitions/model.SquareSize'
      speed:
        type: integer
    type: object
  model.RaceUpdate:
    properties:
      ability_boost:
        type: string
      description:
        type: string
      hit_points:
        $ref: '#/definitions/model.HitPoint'
      language:
        type: string
      name:
        type: string
      size:
        $ref: '#/definitions/model.SquareSize'
      speed:
        type: integer
    type: object
  model.Skill:
    properties:
      background:
        items:
          $ref: '#/definitions/model.Background'
        type: array
      description:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  model.Slot:
    properties:
      armor:
        $ref: '#/definitions/model.CharacterItem'
      armorID:
        type: integer
      character:
        $ref: '#/definitions/model.Character'
      characterID:
        type: integer
      firstWeapon:
        $ref: '#/definitions/model.CharacterItem'
      firstWeaponID:
        type: integer
      id:
        type: integer
      secondWeapon:
        $ref: '#/definitions/model.CharacterItem'
      secondWeaponID:
        type: integer
    type: object
  model.SlotExternal:
    properties:
      armor_id:
        type: integer
      character_id:
        type: integer
      first_weapon_id:
        type: integer
      id:
        type: integer
      second_weapon_id:
        type: integer
    type: object
  model.SlotUpdate:
    properties:
      armor_id:
        type: integer
      character_id:
        type: integer
      first_weapon_id:
        type: integer
      second_weapon_id:
        type: integer
    type: object
  model.SquareSize:
    enum:
    - Tiny
    - Small
    - Medium
    - Large
    - Huge
    - Gargantuan
    type: string
    x-enum-varnames:
    - Tiny
    - Small
    - Medium
    - Large
    - Huge
    - Gargantuan
  model.UpdateArmor:
    properties:
      armor_class:
        type: integer
      bulk:
        type: number
      description:
        type: string
      level:
        type: integer
      name:
        type: string
      price:
        type: string
    type: object
  model.UpdateAttribute:
    properties:
      charisma:
        example: 10
        type: integer
      constitution:
        example: 10
        type: integer
      dexterity:
        example: 10
        type: integer
      intelligence:
        example: 10
        type: integer
      strength:
        example: 10
        type: integer
      wisdom:
        example: 10
        type: integer
    type: object
  model.UpdateCharacterBoost:
    properties:
      charisma:
        example: 10
        type: integer
      constitution:
        example: 10
        type: integer
      dexterity:
        example: 10
        type: integer
      free:
        type: integer
      intelligence:
        example: 10
        type: integer
      strength:
        example: 10
        type: integer
      wisdom:
        example: 10
        type: integer
    type: object
  model.UpdateCharacterItem:
    properties:
      character_id:
        type: integer
      item_id:
        type: integer
      quantity:
        example: 1
        type: integer
    required:
    - quantity
    type: object
  model.UpdateDomain:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - description
    - name
    type: object
  model.UpdateFeat:
    properties:
      description:
        type: string
      level:
        type: integer
      name:
        type: string
    type: object
  model.UpdateGear:
    properties:
      bulk:
        example: 1
        type: number
      description:
        type: string
      level:
        type: integer
      name:
        type: string
      price:
        type: string
    type: object
  model.UpdateWeapon:
    properties:
      bulk:
        type: number
      damage:
        type: integer
      damage_type:
        type: string
      description:
        type: string
      dice:
        type: integer
      diceQuantity:
        type: integer
      level:
        type: integer
      name:
        type: string
      price:
        type: string
    type: object
  model.UserExternal:
    properties:
      admin:
        type: boolean
      characters:
        items:
          $ref: '#/definitions/model.Character'
        type: array
      id:
        type: integer
      username:
        type: string
    required:
    - username
    type: object
  model.UserLogin:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  model.UserPasswordUpdate:
    properties:
      password:
        type: string
    required:
    - password
    type: object
  model.UserUpdateExternal:
    properties:
      email:
        type: string
      username:
        type: string
    type: object
  model.Weapon:
    properties:
      damage:
        type: integer
      damageType:
        type: string
      dice:
        type: integer
      diceQuantity:
        type: integer
      id:
        type: integer
      item:
        $ref: '#/definitions/model.Item'
    type: object
  model.WeaponExternal:
    properties:
      bulk:
        type: number
      damage:
        example: 1
        type: integer
      damage_type:
        type: string
      description:
        type: string
      dice:
        example: 1
        type: integer
      diceQuantity:
        example: 1
        type: integer
      id:
        type: integer
      item_id:
        type: integer
      level:
        example: 1
        type: integer
      name:
        type: string
      price:
        type: string
    required:
    - name
    - price
    type: object
info:
  contact: {}
  description: Api for Pet Project
  title: Kingdom Api
  version: 0.1.0
paths:
  /Ancestry:
    post:
      consumes:
      - application/json
      description: Permissions for Admin
      parameters:
      - description: Feat data
        in: body
        name: ancestry
        required: true
        schema:
          $ref: '#/definitions/model.AncestryCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Feat details
          schema:
            $ref: '#/definitions/model.AncestryExternal'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: You can't access for this API
          schema:
            type: string
      summary: Create and returns Ancestry or nil
      tags:
      - Ancestry
  /Race/{id}:
    delete:
      consumes:
      - application/json
      description: Permissions for Admin
      parameters:
      - description: Race id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: You can't access for this API
          schema:
            type: string
        "404":
          description: Domain doesn't exist
          schema:
            type: string
      summary: Deletes Race by ID or returns nil
      tags:
      - Race
  /ancestry:
    get:
      consumes:
      - application/json
      description: Return all GetAncestries
      produces:
      - application/json
      responses:
        "200":
          description: Ancestry details
          schema:
            $ref: '#/definitions/model.Ancestry'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Returns all Ancestries
      tags:
      - Ancestry
  /ancestry/{id}:
    delete:
      consumes:
      - application/json
      description: Permissions for Admin
      parameters:
      - description: Ancestry id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: You can't access for this API
          schema:
            type: string
        "404":
          description: Domain doesn't exist
          schema:
            type: string
      summary: Deletes Ancestry by ID or returns nil
      tags:
      - Ancestry
    get:
      consumes:
      - application/json
      description: Permissions for auth users
      parameters:
      - description: Ancestry id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Ancestry details
          schema:
            $ref: '#/definitions/model.Ancestry'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Returns Ancestry by ID
      tags:
      - Ancestry
    patch:
      consumes:
      - application/json
      description: Permissions for Admin
      parameters:
      - description: Ancestry id
        in: path
        name: id
        required: true
        type: integer
      - description: Ancestry data
        in: body
        name: Ancestry
        required: true
        schema:
          $ref: '#/definitions/model.AncestryUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Ancestry details
          schema:
            $ref: '#/definitions/model.Ancestry'
        "403":
          description: You can't access for this API
          schema:
            type: string
        "404":
          description: Ancestry doesn't exist
          schema:
            type: string
      summary: Updates Ancestry by ID or nil
      tags:
      - Ancestry
  /attribute/{id}:
    get:
      consumes:
      - application/json
      description: Permissions for auth user or admin
      parameters:
      - description: character_id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Attribute details
          schema:
            $ref: '#/definitions/model.AttributeExternal'
        "404":
          description: Attribute not found
          schema:
            type: string
      summary: Returns attribute by id
      tags:
      - Attribute
    patch:
      consumes:
      - application/json
      description: Permissions for Character's User or Admin
      parameters:
      - description: Attribute id
        in: path
        name: id
        required: true
        type: integer
      - description: Attribute data
        in: body
        name: attribute
        required: true
        schema:
          $ref: '#/definitions/model.UpdateAttribute'
      produces:
      - application/json
      responses:
        "200":
          description: Attribute details
          schema:
            $ref: '#/definitions/model.AttributeExternal'
        "404":
          description: Attribute doesn't exist
          schema:
            type: string
      summary: Updates Attribute by ID or nil
      tags:
      - Attribute
  /character:
    get:
      consumes:
      - application/json
      description: Return all characters for current user
      produces:
      - application/json
      responses:
        "200":
          description: Character details
          schema:
            $ref: '#/definitions/model.CharacterExternal'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Returns all characters
      tags:
      - Character
    post:
      consumes:
      - application/json
      description: Create new character
      parameters:
      - description: Character data
        in: body
        name: character
        required: true
        schema:
          $ref: '#/definitions/model.CreateCharacter'
      produces:
      - application/json
      responses:
        "201":
          description: Character details
          schema:
            $ref: '#/definitions/model.CharacterExternal'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Create and returns character or nil
      tags:
      - Character
  /character-item:
    post:
      consumes:
      - application/json
      description: Permissions for Admin
      parameters:
      - description: CharacterItem data
        in: body
        name: characterItem
        required: true
        schema:
          $ref: '#/definitions/model.CreateCharacterItem'
      produces:
      - application/json
      responses:
        "201":
          description: CharacterItem details
          schema:
            $ref: '#/definitions/model.CharacterItemExternal'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: You can't access for this API
          schema:
            type: string
      summary: Create and returns CharacterItem or nil
      tags:
      - CharacterItem
  /character-item/{id}:
    delete:
      consumes:
      - application/json
      description: Permissions for Admin
      parameters:
      - description: CharacterItem id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: You can't access for this API
          schema:
            type: string
        "404":
          description: CharacterItem doesn't exist
          schema:
            type: string
      summary: Deletes CharacterItem by ID or returns nil
      tags:
      - CharacterItem
    get:
      consumes:
      - application/json
      description: Retrieve CharacterItem details using its ID
      parameters:
      - description: CharacterItem id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: CharacterItem details
          schema:
            $ref: '#/definitions/model.CharacterItemExternal'
        "404":
          description: CharacterItem not found
          schema:
            type: string
      summary: Returns CharacterItem by id
      tags:
      - CharacterItem
    patch:
      consumes:
      - application/json
      description: Permissions for Admin
      parameters:
      - description: CharacterItem id
        in: path
        name: id
        required: true
        type: integer
      - description: CharacterItem data
        in: body
        name: characterItem
        required: true
        schema:
          $ref: '#/definitions/model.UpdateCharacterItem'
      produces:
      - application/json
      responses:
        "200":
          description: CharacterItem details
          schema:
            $ref: '#/definitions/model.CharacterItemExternal'
        "403":
          description: You can't access for this API
          schema:
            type: string
        "404":
          description: CharacterItem doesn't exist
          schema:
            type: string
      summary: Updates CharacterItem by ID or nil
      tags:
      - CharacterItem
  /character-item/list/{character_id}:
    get:
      consumes:
      - application/json
      description: Return all CharacterItems
      parameters:
      - description: Character id
        in: path
        name: character_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: CharacterItem details
          schema:
            $ref: '#/definitions/model.CharacterItemExternal'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Returns all CharacterItems
      tags:
      - CharacterItem
  /character/{id}:
    delete:
      consumes:
      - application/json
      description: Permissions for Character's User or Admin
      parameters:
      - description: Character id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: You can't access for this API
          schema:
            type: string
        "404":
          description: Character doesn't exist
          schema:
            type: string
      summary: Deletes Character by ID or returns nil
      tags:
      - Character
    get:
      consumes:
      - application/json
      description: Retrieve Character details using its ID
      parameters:
      - description: character id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: character details
          schema:
            $ref: '#/definitions/model.CharacterExternal'
        "404":
          description: Character not found
          schema:
            type: string
      summary: Returns Character by id
      tags:
      - Character
    patch:
      consumes:
      - application/json
      description: Permissions for Character's User or Admin
      parameters:
      - description: Character id
        in: path
        name: id
        required: true
        type: integer
      - description: Character data
        in: body
        name: character
        required: true
        schema:
          $ref: '#/definitions/model.CharacterUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Character details
          schema:
            $ref: '#/definitions/model.CharacterExternal'
        "404":
          description: Character doesn't exist
          schema:
            type: string
      summary: Updates Character by ID or nil
      tags:
      - Character
  /character_boost/{id}:
    get:
      consumes:
      - application/json
      description: Permissions for auth user or admin
      parameters:
      - description: character_id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: CharacterBoost details
          schema:
            $ref: '#/definitions/model.CharacterBoostExternal'
        "404":
          description: CharacterBoost not found
          schema:
            type: string
      summary: Returns CharacterBoost by id
      tags:
      - CharacterBoost
    patch:
      consumes:
      - application/json
      description: Permissions for Character's User or Admin
      parameters:
      - description: CharacterBoost id
        in: path
        name: id
        required: true
        type: integer
      - description: CharacterBoost data
        in: body
        name: CharacterBoost
        required: true
        schema:
          $ref: '#/definitions/model.UpdateCharacterBoost'
      produces:
      - application/json
      responses:
        "200":
          description: CharacterBoost details
          schema:
            $ref: '#/definitions/model.CharacterBoostExternal'
        "404":
          description: CharacterBoost doesn't exist
          schema:
            type: string
      summary: Updates CharacterBoost by ID or nil
      tags:
      - CharacterBoost
  /class:
    post:
      consumes:
      - application/json
      description: Create new Character Class
      parameters:
      - description: Character Class data
        in: body
        name: god
        required: true
        schema:
          $ref: '#/definitions/model.CharacterClassCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Character Class details
          schema:
            $ref: '#/definitions/model.CharacterClass'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Create and returns new Character Class or nil
      tags:
      - Character Class
  /domain:
    get:
      consumes:
      - application/json
      description: Return all domains
      produces:
      - application/json
      responses:
        "200":
          description: Domain details
          schema:
            $ref: '#/definitions/model.Domain'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Returns all domains
      tags:
      - Domain
    post:
      consumes:
      - application/json
      description: Permissions for Admin
      parameters:
      - description: Domain data
        in: body
        name: character
        required: true
        schema:
          $ref: '#/definitions/model.CreateDomain'
      produces:
      - application/json
      responses:
        "201":
          description: Domain details
          schema:
            $ref: '#/definitions/model.DomainExternal'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: You can't access for this API
          schema:
            type: string
      summary: Create and returns domain or nil
      tags:
      - Domain
  /domain/{id}:
    delete:
      consumes:
      - application/json
      description: Permissions for Admin
      parameters:
      - description: Domain id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: You can't access for this API
          schema:
            type: string
        "404":
          description: Domain doesn't exist
          schema:
            type: string
      summary: Deletes Domain by ID or returns nil
      tags:
      - Domain
    get:
      consumes:
      - application/json
      description: Retrieve Domain details using its ID
      parameters:
      - description: domain id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: domain details
          schema:
            $ref: '#/definitions/model.Domain'
        "404":
          description: Domain not found
          schema:
            type: string
      summary: Returns Domain by id
      tags:
      - Domain
    patch:
      consumes:
      - application/json
      description: Permissions for Admin
      parameters:
      - description: Domain id
        in: path
        name: id
        required: true
        type: integer
      - description: Domain data
        in: body
        name: character
        required: true
        schema:
          $ref: '#/definitions/model.UpdateDomain'
      produces:
      - application/json
      responses:
        "200":
          description: Domain details
          schema:
            $ref: '#/definitions/model.DomainExternal'
        "403":
          description: You can't access for this API
          schema:
            type: string
        "404":
          description: Domain doesn't exist
          schema:
            type: string
      summary: Updates Domain by ID or nil
      tags:
      - Domain
  /feat:
    get:
      consumes:
      - application/json
      description: Return all Feats
      produces:
      - application/json
      responses:
        "200":
          description: Feat details
          schema:
            $ref: '#/definitions/model.Feat'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Returns all Feats
      tags:
      - Item
    post:
      consumes:
      - application/json
      description: Permissions for Admin
      parameters:
      - description: Feat data
        in: body
        name: feat
        required: true
        schema:
          $ref: '#/definitions/model.CreateFeat'
      produces:
      - application/json
      responses:
        "201":
          description: Feat details
          schema:
            $ref: '#/definitions/model.FeatExternal'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: You can't access for this API
          schema:
            type: string
      summary: Create and returns Feat or nil
      tags:
      - Feat
  /feat/{id}:
    delete:
      consumes:
      - application/json
      description: Permissions for Admin
      parameters:
      - description: Feat id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: You can't access for this API
          schema:
            type: string
        "404":
          description: Domain doesn't exist
          schema:
            type: string
      summary: Deletes Feat by ID or returns nil
      tags:
      - Feat
    patch:
      consumes:
      - application/json
      description: Permissions for Admin
      parameters:
      - description: Feat id
        in: path
        name: id
        required: true
        type: integer
      - description: Feat data
        in: body
        name: Feat
        required: true
        schema:
          $ref: '#/definitions/model.UpdateFeat'
      produces:
      - application/json
      responses:
        "200":
          description: Feat details
          schema:
            $ref: '#/definitions/model.Feat'
        "403":
          description: You can't access for this API
          schema:
            type: string
        "404":
          description: Feat doesn't exist
          schema:
            type: string
      summary: Updates Feat by ID or nil
      tags:
      - Item
  /god:
    get:
      consumes:
      - application/json
      description: Return all gods and their domains
      produces:
      - application/json
      responses:
        "200":
          description: Character details
          schema:
            $ref: '#/definitions/model.God'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Returns all gods
      tags:
      - God
    post:
      consumes:
      - application/json
      description: Create new God
      parameters:
      - description: God data
        in: body
        name: god
        required: true
        schema:
          $ref: '#/definitions/model.GodCreate'
      produces:
      - application/json
      responses:
        "201":
          description: God details
          schema:
            $ref: '#/definitions/model.God'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Create and returns new God or nil
      tags:
      - God
  /god/{id}:
    delete:
      consumes:
      - application/json
      description: Permissions for Auth user
      parameters:
      - description: God id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: You can't access for this API
          schema:
            type: string
        "404":
          description: God doesn't exist
          schema:
            type: string
      summary: Deletes God by ID or returns nil
      tags:
      - God
    get:
      consumes:
      - application/json
      description: Retrieve God details using its ID
      parameters:
      - description: god id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: God details
          schema:
            $ref: '#/definitions/model.God'
        "404":
          description: God not found
          schema:
            type: string
      summary: Returns God by id
      tags:
      - God
    patch:
      consumes:
      - application/json
      description: Updates God
      parameters:
      - description: God id
        in: path
        name: id
        required: true
        type: integer
      - description: God data
        in: body
        name: character
        required: true
        schema:
          $ref: '#/definitions/model.GodUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: God details
          schema:
            $ref: '#/definitions/model.God'
        "404":
          description: God doesn't exist
          schema:
            type: string
      summary: Updates God by ID or nil
      tags:
      - God
  /item:
    get:
      consumes:
      - application/json
      description: Return all items
      produces:
      - application/json
      responses:
        "200":
          description: Item details
          schema:
            $ref: '#/definitions/model.Item'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Returns all items
      tags:
      - Item
  /item/{id}:
    delete:
      consumes:
      - application/json
      description: Permissions for Admin
      parameters:
      - description: Item id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: You can't access for this API
          schema:
            type: string
        "404":
          description: Item doesn't exist
          schema:
            type: string
      summary: Deletes Item by ID or returns nil
      tags:
      - Item
    get:
      consumes:
      - application/json
      description: Permissions for auth users
      parameters:
      - description: Item id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Item details
          schema:
            $ref: '#/definitions/model.ItemExternal'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Returns Item by ID
      tags:
      - Item
  /item/Feat/{id}:
    get:
      consumes:
      - application/json
      description: Permissions for auth users
      parameters:
      - description: Feat id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Feat details
          schema:
            $ref: '#/definitions/model.Feat'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Returns Feat by ID
      tags:
      - Item
  /item/armor:
    get:
      consumes:
      - application/json
      description: Return all armors
      produces:
      - application/json
      responses:
        "200":
          description: Armor details
          schema:
            $ref: '#/definitions/model.Armor'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Returns all armors
      tags:
      - Item
    post:
      consumes:
      - application/json
      description: Permissions for Admin
      parameters:
      - description: Armor data
        in: body
        name: character
        required: true
        schema:
          $ref: '#/definitions/model.CreateArmor'
      produces:
      - application/json
      responses:
        "201":
          description: Armor details
          schema:
            $ref: '#/definitions/model.ArmorExternal'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: You can't access for this API
          schema:
            type: string
      summary: Create and returns armor or nil
      tags:
      - Item
  /item/armor/{id}:
    get:
      consumes:
      - application/json
      description: Permissions for auth users
      parameters:
      - description: armor id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Armor details
          schema:
            $ref: '#/definitions/model.Armor'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Returns Armor by ID
      tags:
      - Item
    patch:
      consumes:
      - application/json
      description: Permissions for Admin
      parameters:
      - description: Armor id
        in: path
        name: id
        required: true
        type: integer
      - description: Armor data
        in: body
        name: armor
        required: true
        schema:
          $ref: '#/definitions/model.UpdateArmor'
      produces:
      - application/json
      responses:
        "200":
          description: Armor details
          schema:
            $ref: '#/definitions/model.Armor'
        "403":
          description: You can't access for this API
          schema:
            type: string
        "404":
          description: Armor doesn't exist
          schema:
            type: string
      summary: Updates Armor by ID or nil
      tags:
      - Item
  /item/gear:
    get:
      consumes:
      - application/json
      description: Return all gears
      produces:
      - application/json
      responses:
        "200":
          description: Gear details
          schema:
            $ref: '#/definitions/model.Gear'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Returns all gears
      tags:
      - Item
    post:
      consumes:
      - application/json
      description: Permissions for Admin
      parameters:
      - description: Gear data
        in: body
        name: gear
        required: true
        schema:
          $ref: '#/definitions/model.CreateGear'
      produces:
      - application/json
      responses:
        "201":
          description: Gear details
          schema:
            $ref: '#/definitions/model.GearExternal'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: You can't access for this API
          schema:
            type: string
      summary: Create and returns Gear or nil
      tags:
      - Item
  /item/gear/{id}:
    get:
      consumes:
      - application/json
      description: Permissions for auth users
      parameters:
      - description: Gear id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Gear details
          schema:
            $ref: '#/definitions/model.Gear'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Returns Gear by ID
      tags:
      - Item
    patch:
      consumes:
      - application/json
      description: Permissions for Admin
      parameters:
      - description: Gear id
        in: path
        name: id
        required: true
        type: integer
      - description: Gear data
        in: body
        name: Gear
        required: true
        schema:
          $ref: '#/definitions/model.UpdateGear'
      produces:
      - application/json
      responses:
        "200":
          description: Gear details
          schema:
            $ref: '#/definitions/model.Gear'
        "403":
          description: You can't access for this API
          schema:
            type: string
        "404":
          description: Gear doesn't exist
          schema:
            type: string
      summary: Updates Gear by ID or nil
      tags:
      - Item
  /item/weapon:
    get:
      consumes:
      - application/json
      description: Return all weapons
      produces:
      - application/json
      responses:
        "200":
          description: Weapon details
          schema:
            $ref: '#/definitions/model.Weapon'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Returns all weapons
      tags:
      - Item
    post:
      consumes:
      - application/json
      description: Permissions for Admin
      parameters:
      - description: Weapon data
        in: body
        name: weapon
        required: true
        schema:
          $ref: '#/definitions/model.CreateWeapon'
      produces:
      - application/json
      responses:
        "201":
          description: Weapon details
          schema:
            $ref: '#/definitions/model.WeaponExternal'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: You can't access for this API
          schema:
            type: string
      summary: Create and returns weapon or nil
      tags:
      - Item
  /item/weapon/{id}:
    get:
      consumes:
      - application/json
      description: Permissions for auth users
      parameters:
      - description: Weapon id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Weapon details
          schema:
            $ref: '#/definitions/model.Weapon'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Returns weapon by ID
      tags:
      - Item
    patch:
      consumes:
      - application/json
      description: Permissions for Admin
      parameters:
      - description: Weapon id
        in: path
        name: id
        required: true
        type: integer
      - description: Weapon data
        in: body
        name: character
        required: true
        schema:
          $ref: '#/definitions/model.UpdateWeapon'
      produces:
      - application/json
      responses:
        "200":
          description: Weapon details
          schema:
            $ref: '#/definitions/model.Weapon'
        "403":
          description: You can't access for this API
          schema:
            type: string
        "404":
          description: Weapon doesn't exist
          schema:
            type: string
      summary: Updates weapon by ID or nil
      tags:
      - Item
  /login:
    post:
      consumes:
      - application/json
      description: Авторизация пользователя по логину и паролю
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Login user for token
      tags:
      - Auth
  /race:
    get:
      consumes:
      - application/json
      description: Return all Races
      produces:
      - application/json
      responses:
        "200":
          description: Race details
          schema:
            $ref: '#/definitions/model.Race'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Returns all Races
      tags:
      - Race
    post:
      consumes:
      - application/json
      description: Permissions for Admin
      parameters:
      - description: Feat data
        in: body
        name: race
        required: true
        schema:
          $ref: '#/definitions/model.RaceCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Feat details
          schema:
            $ref: '#/definitions/model.RaceExternal'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: You can't access for this API
          schema:
            type: string
      summary: Create and returns Race or nil
      tags:
      - Race
  /race/{id}:
    get:
      consumes:
      - application/json
      description: Permissions for auth users
      parameters:
      - description: Race id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Race details
          schema:
            $ref: '#/definitions/model.Race'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Returns Race by ID
      tags:
      - Race
    patch:
      consumes:
      - application/json
      description: Permissions for Admin
      parameters:
      - description: Race id
        in: path
        name: id
        required: true
        type: integer
      - description: Race data
        in: body
        name: race
        required: true
        schema:
          $ref: '#/definitions/model.RaceUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Race details
          schema:
            $ref: '#/definitions/model.Race'
        "403":
          description: You can't access for this API
          schema:
            type: string
        "404":
          description: Race doesn't exist
          schema:
            type: string
      summary: Updates Race by ID or nil
      tags:
      - Race
  /slot/{id}:
    get:
      consumes:
      - application/json
      description: Permissions for auth user
      parameters:
      - description: slot id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: slot details
          schema:
            $ref: '#/definitions/model.SlotExternal'
        "404":
          description: Slot not found
          schema:
            type: string
      summary: Returns slot by id
      tags:
      - Slot
    patch:
      consumes:
      - application/json
      description: Permissions for Character's User or Admin
      parameters:
      - description: Slot id
        in: path
        name: id
        required: true
        type: integer
      - description: Character data
        in: body
        name: slot
        required: true
        schema:
          $ref: '#/definitions/model.SlotUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Character details
          schema:
            $ref: '#/definitions/model.SlotExternal'
        "404":
          description: Slot doesn't exist
          schema:
            type: string
      summary: Updates Slot by ID or nil
      tags:
      - Slot
  /user:
    get:
      consumes:
      - application/json
      description: Returns all users
      produces:
      - application/json
      responses:
        "200":
          description: User list
          schema:
            $ref: '#/definitions/model.UserExternal'
        "500":
          description: Internal Server Error
      summary: Returns all users
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Create new user
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.CreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: user details
          schema:
            $ref: '#/definitions/model.UserExternal'
        "404":
          description: User already exist
          schema:
            type: string
      summary: Create and returns user or nil
      tags:
      - User
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete User
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Ok
          schema:
            type: string
        "400":
          description: User doesn't exist
          schema:
            type: string
        "401":
          description: You need to provide a valid access token or user credentials
            to access this api
          schema:
            type: string
      summary: Returns and delete User by ID if you're admin
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Retrieve User details using its ID
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: user details
          schema:
            $ref: '#/definitions/model.UserExternal'
        "404":
          description: User not found
          schema:
            type: string
      summary: returns User by ID
      tags:
      - User
    patch:
      consumes:
      - application/json
      description: Permissions for Admin and current user
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: integer
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserUpdateExternal'
      produces:
      - application/json
      responses:
        "201":
          description: Ok
          schema:
            type: string
        "400":
          description: User doesn't exist
          schema:
            type: string
        "401":
          description: You need to provide a valid access token or user credentials
            to access this api
          schema:
            type: string
      summary: Update User
      tags:
      - User
  /user/password:
    patch:
      consumes:
      - application/json
      description: 'Permissions: Current User'
      parameters:
      - description: User password data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserPasswordUpdate'
      produces:
      - application/json
      responses:
        "201":
          description: Ok
          schema:
            type: string
        "400":
          description: User doesn't exist
          schema:
            type: string
        "401":
          description: You need to provide a valid access token or user credentials
            to access this api
          schema:
            type: string
      summary: Changes User's password
      tags:
      - User
schemes:
- http
- https
securityDefinitions:
  JWT:
    description: JWT security accessToken. Please add it in the format "Bearer {AccessToken}"
      to authorize your requests.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
